{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"L1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP server import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 1337)) data = sock.recv(1024) udata = data.decode('utf-8') print(f'Client message: {udata}') sock.close() client import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('localhost', 1337)) sock.send(b'Hello, I am CLient \\n') \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. server import socket import pickle def trapezoidSquare(data): obj = pickle.loads(data) top_side = int(obj.get('top_side')) bot_side = int(obj.get('bot_side')) perp = int(obj.get('perp')) return ((top_side + bot_side) / 2) * perp sock = socket.socket() sock.bind(('127.0.0.1', 1337)) sock.listen(1) conn, addr = sock.accept() all_data = bytearray() while True: data = conn.recv(1024) if not data: break all_data += data result = trapezoidSquare(all_data) result = str(result) conn.send(result.encode('utf-8')) print('Close') conn.close client import socket import pickle sock = socket.socket() sock.connect(('127.0.0.1', 1337)) obj = { 'top_side': input('Enter value of top side: '), 'bot_side': input('Enter value of bot side: '), 'perp': input('Enter value of perpendicular: ') } print('Send: ', obj) data = pickle.dumps(obj) sock.sendall(data) msg = sock.recv(1024) print('Answer: ', msg.decode('utf-8')) print('Close') sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html> client import socket sock = socket.socket() sock.connect(('127.0.0.1', 1337)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() server import socket sock = socket.socket() sock.bind(('127.0.0.1', 1337)) sock.listen(1) while True: conn, addr = sock.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('127.0.0.1', 1337)) server.listen(100) clients = list() end = list() def accept(): while True: conn, addr = server.accept() clients.append(conn) print(f'Current connections: {len(clients)}') def recv_data(conn): while True: try: indata = conn.recv(1024) except Exception as e: clients.remove(conn) end.remove(conn) break print(indata.decode('utf-8')) for cl in clients: if cl != conn: cl.send(indata) def outdatas(): while True: print('') outdata = input('') print() if outdata == '/LEAVE': break for conn in clients: conn.send(f\"Server: {outdata}\".encode('utf-8)')) def indatas(): while True: for cl in clients: if cl in end: continue index = threading.Thread(target=recv_data, args=(cl,)) index.start() end.append(cl) t1 = threading.Thread(target=indatas, name='input') t1.start() t2 = threading.Thread(target=outdatas, name='out') t2.start() t3 = threading.Thread(target=accept(), name='accept') t3.start() t2.join() for conn in clients: conn.close() client import socket import threading client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) print('Leave from server - /LEAVE') name = input(\"Enter your name: \") client.connect(('127.0.0.1', 1337)) def outdatas(): while True: outdata = input('') if outdata == '/LEAVE': break client.send(f'{name}: {outdata}'.encode('utf-8')) print(f'{name}: {outdata}') def indatas(): while True: indata = client.recv(1024) print(indata.decode('utf-8')) t1 = threading.Thread(target=indatas, name='input') t2 = threading.Thread(target=outdatas, name='out') t1.start() t2.start() t2.join() client.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. import socket class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grades = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Fail', e) finally: serv_sock.close() def serve_client(self, client): try: req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label><input name=\"discipline\" /><br><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><br><br><input type=\"submit\"></form><style>.center{background: #F44336}</style>' for subject in self.grades: body += f'<div><span>{subject}: {self.grades[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if len(discipline) == 0 or grade not in ['1', '2', '3', '4', '5']: return self.handle_get() if discipline not in self.grades: self.grades[discipline] = [] self.grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 7780) serv.serve_forever()","title":"L1"},{"location":"L1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"L1/#1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"L1/#server","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 1337)) data = sock.recv(1024) udata = data.decode('utf-8') print(f'Client message: {udata}') sock.close()","title":"server"},{"location":"L1/#client","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('localhost', 1337)) sock.send(b'Hello, I am CLient \\n')","title":"client"},{"location":"L1/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"L1/#server_1","text":"import socket import pickle def trapezoidSquare(data): obj = pickle.loads(data) top_side = int(obj.get('top_side')) bot_side = int(obj.get('bot_side')) perp = int(obj.get('perp')) return ((top_side + bot_side) / 2) * perp sock = socket.socket() sock.bind(('127.0.0.1', 1337)) sock.listen(1) conn, addr = sock.accept() all_data = bytearray() while True: data = conn.recv(1024) if not data: break all_data += data result = trapezoidSquare(all_data) result = str(result) conn.send(result.encode('utf-8')) print('Close') conn.close","title":"server"},{"location":"L1/#client_1","text":"import socket import pickle sock = socket.socket() sock.connect(('127.0.0.1', 1337)) obj = { 'top_side': input('Enter value of top side: '), 'bot_side': input('Enter value of bot side: '), 'perp': input('Enter value of perpendicular: ') } print('Send: ', obj) data = pickle.dumps(obj) sock.sendall(data) msg = sock.recv(1024) print('Answer: ', msg.decode('utf-8')) print('Close') sock.close()","title":"client"},{"location":"L1/#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"L1/#indexhtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Test page</title> </head> <body> <p> \"Hello, world!\" </p> </body> </html>","title":"index.html"},{"location":"L1/#client_2","text":"import socket sock = socket.socket() sock.connect(('127.0.0.1', 1337)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close()","title":"client"},{"location":"L1/#server_2","text":"import socket sock = socket.socket() sock.bind(('127.0.0.1', 1337)) sock.listen(1) while True: conn, addr = sock.accept() html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n' + html_content conn.sendall(html_response.encode('utf-8')) conn.close()","title":"server"},{"location":"L1/#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"L1/#server_3","text":"import socket import threading server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind(('127.0.0.1', 1337)) server.listen(100) clients = list() end = list() def accept(): while True: conn, addr = server.accept() clients.append(conn) print(f'Current connections: {len(clients)}') def recv_data(conn): while True: try: indata = conn.recv(1024) except Exception as e: clients.remove(conn) end.remove(conn) break print(indata.decode('utf-8')) for cl in clients: if cl != conn: cl.send(indata) def outdatas(): while True: print('') outdata = input('') print() if outdata == '/LEAVE': break for conn in clients: conn.send(f\"Server: {outdata}\".encode('utf-8)')) def indatas(): while True: for cl in clients: if cl in end: continue index = threading.Thread(target=recv_data, args=(cl,)) index.start() end.append(cl) t1 = threading.Thread(target=indatas, name='input') t1.start() t2 = threading.Thread(target=outdatas, name='out') t2.start() t3 = threading.Thread(target=accept(), name='accept') t3.start() t2.join() for conn in clients: conn.close()","title":"server"},{"location":"L1/#client_3","text":"import socket import threading client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) print('Leave from server - /LEAVE') name = input(\"Enter your name: \") client.connect(('127.0.0.1', 1337)) def outdatas(): while True: outdata = input('') if outdata == '/LEAVE': break client.send(f'{name}: {outdata}'.encode('utf-8')) print(f'{name}: {outdata}') def indatas(): while True: indata = client.recv(1024) print(indata.decode('utf-8')) t1 = threading.Thread(target=indatas, name='input') t2 = threading.Thread(target=outdatas, name='out') t1.start() t2.start() t2.join() client.close()","title":"client"},{"location":"L1/#5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. import socket class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.grades = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Fail', e) finally: serv_sock.close() def serve_client(self, client): try: req = self.parse_request(client) resp = self.handle_request(req) self.send_response(client, resp) except ConnectionResetError: client = None if client: client.close() def parse_request_line(self, rfile): line = rfile.readline() line = line.decode('utf-8') return line.split() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label><input name=\"discipline\" /><br><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><br><br><input type=\"submit\"></form><style>.center{background: #F44336}</style>' for subject in self.grades: body += f'<div><span>{subject}: {self.grades[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if len(discipline) == 0 or grade not in ['1', '2', '3', '4', '5']: return self.handle_get() if discipline not in self.grades: self.grades[discipline] = [] self.grades[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body if __name__ == '__main__': serv = MyHTTPServer('127.0.0.1', 7780) serv.serve_forever()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"L2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442). \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u041c\u043e\u0434\u0435\u043b\u0438 \u0413\u043e\u0440\u043e\u0434 class City(models.Model): name = models.CharField('City name', max_length=64, unique=True) slug = models.SlugField('City link', max_length=64, unique=True) def get_absolute_url(self): return reverse('city_details_url', kwargs={'slug': self.slug}) def __str__(self): return self.name \u0410\u0432\u0438\u0430\u043b\u0438\u043d\u0438\u044f class Airline(models.Model): name = models.CharField('Airline name', max_length=64, unique=True) def __str__(self): return self.name \u0420\u0435\u0439\u0441 class Flight(models.Model): number = models.CharField('Flight number', max_length=10, db_index=True) airline = models.ForeignKey(Airline, on_delete=models.CASCADE) city_from = models.ForeignKey(City, related_name='flights_from', on_delete=models.CASCADE) city_to = models.ForeignKey(City, related_name='flights_to', on_delete=models.CASCADE) departure = models.DateTimeField('Departure datetime', null=False) arrival = models.DateTimeField('Arrival datetime', null=False) slug = models.SlugField(max_length=150, unique=True) can_buy = models.BooleanField(default=True) def __str__(self): return f\"{self.number}: {self.city_from} - {self.city_to}. Departure at {self.departure}\" def get_absolute_url(self): return reverse('flight_details_url', kwargs={'slug': self.slug}) \u0411\u0438\u043b\u0435\u0442 class Ticket(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) user = models.ForeignKey(User, on_delete=models.CASCADE) # to be filled in when purchasing the ticket passenger_name = models.CharField(max_length=32, null=False) passenger_surname = models.CharField(max_length=32, null=False) passenger_passport = models.CharField(max_length=10, null=False) # to be filled in at check-in seat = models.CharField(max_length=3, null=True, blank=True, default=None) review_text = models.TextField(null=True, default=None, blank=True) rate = models.IntegerField(null=True, default=None, blank=True) def __str__(self): return f\"[{self.flight}] {self.passenger_surname} {self.passenger_name}\" \u041f\u0443\u0442\u0438 urlpatterns = [ path('flights/', flights_list, name='flights_list_url'), path('flights/<str:slug>/', flight_details, name='flight_details_url'), path('registration/', registration, name='registration_url'), path('login/', login_page, name='login_url'), path('logout/', logout_user, name='logout_url'), path('profile/', profile, name='profile_url'), path('profile/ticket/<int:pk>/delete/', ticket_delete, name='ticket_delete_url'), path('profile/ticket/<int:pk>/review/update/', ReviewUpdate.as_view()), path('profile/ticket/<int:pk>/update/', TicketUpdate.as_view()), ] \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0422\u0430\u0431\u043b\u043e \u0440\u0435\u0439\u0441\u043e\u0432 def flights_list(request): flights = Flight.objects.all() flights = flights.order_by('departure').reverse() return render(request, 'flights/flights_list.html', context={'flights': flights}) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0439\u0441\u0435 @login_required(login_url='login_url') def flight_details(request, slug): flight = Flight.objects.get(slug__iexact=slug) rates = Ticket.objects.filter(flight__slug=slug).exclude(rate=None) passengers = Ticket.objects.filter(flight__slug=slug).order_by('seat') form = BuyTicketForm(request.POST or None) if request.method == 'POST': form = BuyTicketForm(request.POST) ticket = form.save(commit=False) ticket.user = request.user ticket.flight = flight if form.is_valid(): ticket.save() return redirect('profile_url') isOrdered = Ticket.objects.filter(user__username=request.user.username, flight__slug=slug) return render(request, 'flights/flight_page.html', context={'flight': flight, 'form': form, 'ordered': isOrdered, 'rates': rates, 'passengers': passengers}) \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0444\u043e\u0440\u043c\u0430: class BuyTicketForm(forms.ModelForm): class Meta: model = Ticket fields = [ \"passenger_name\", \"passenger_surname\", \"passenger_passport\", ] \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f def registration(request): if request.user.is_authenticated: return redirect('tours_list_url') else: form = CreateUserForm() if request.method == 'POST': form = CreateUserForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Account was created for ' + form.cleaned_data.get('username')) return redirect('login_url') return render(request, 'flights/registration.html', context={'form': form}) def login_page(request): if request.user.is_authenticated: return redirect('flights_list_url') else: if request.method == 'POST': username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('profile_url') else: messages.info(request, 'Username OR password is incorrect') return render(request, 'flights/login.html', context={}) def logout_user(request): logout(request) return redirect('login_url') \u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f @login_required(login_url='login_url') def profile(request): tickets = Ticket.objects.filter(user__username__iexact=request.user) tickets = tickets.order_by('flight__departure').reverse() return render(request, 'flights/profile.html', context={'tickets': tickets}) def ticket_delete(request, pk): ticket = Ticket.objects.get(id=pk) ticket.delete() return redirect('profile_url') class TicketUpdate(UpdateView): model = Ticket fields = ['passenger_name', 'passenger_surname', 'passenger_passport'] success_url = '/profile' template_name = 'flights/ticket_update.html' class ReviewUpdate(UpdateView): model = Ticket fields = ['rate', 'review_text'] success_url = '/profile' template_name = 'flights/review_update.html'","title":"L2"},{"location":"L2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"L2/#_1","text":"\u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445. \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 \u0440\u0435\u0439\u0441\u0430, \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043e\u0442\u043b\u0435\u0442\u0435, \u043f\u0440\u0438\u043b\u0435\u0442\u0435, \u0442\u0438\u043f\u0435 (\u043f\u0440\u0438\u043b\u0435\u0442, \u043e\u0442\u043b\u0435\u0442). \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"L2/#_2","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"L2/#_3","text":"class City(models.Model): name = models.CharField('City name', max_length=64, unique=True) slug = models.SlugField('City link', max_length=64, unique=True) def get_absolute_url(self): return reverse('city_details_url', kwargs={'slug': self.slug}) def __str__(self): return self.name","title":"\u0413\u043e\u0440\u043e\u0434"},{"location":"L2/#_4","text":"class Airline(models.Model): name = models.CharField('Airline name', max_length=64, unique=True) def __str__(self): return self.name","title":"\u0410\u0432\u0438\u0430\u043b\u0438\u043d\u0438\u044f"},{"location":"L2/#_5","text":"class Flight(models.Model): number = models.CharField('Flight number', max_length=10, db_index=True) airline = models.ForeignKey(Airline, on_delete=models.CASCADE) city_from = models.ForeignKey(City, related_name='flights_from', on_delete=models.CASCADE) city_to = models.ForeignKey(City, related_name='flights_to', on_delete=models.CASCADE) departure = models.DateTimeField('Departure datetime', null=False) arrival = models.DateTimeField('Arrival datetime', null=False) slug = models.SlugField(max_length=150, unique=True) can_buy = models.BooleanField(default=True) def __str__(self): return f\"{self.number}: {self.city_from} - {self.city_to}. Departure at {self.departure}\" def get_absolute_url(self): return reverse('flight_details_url', kwargs={'slug': self.slug})","title":"\u0420\u0435\u0439\u0441"},{"location":"L2/#_6","text":"class Ticket(models.Model): flight = models.ForeignKey(Flight, on_delete=models.CASCADE) user = models.ForeignKey(User, on_delete=models.CASCADE) # to be filled in when purchasing the ticket passenger_name = models.CharField(max_length=32, null=False) passenger_surname = models.CharField(max_length=32, null=False) passenger_passport = models.CharField(max_length=10, null=False) # to be filled in at check-in seat = models.CharField(max_length=3, null=True, blank=True, default=None) review_text = models.TextField(null=True, default=None, blank=True) rate = models.IntegerField(null=True, default=None, blank=True) def __str__(self): return f\"[{self.flight}] {self.passenger_surname} {self.passenger_name}\"","title":"\u0411\u0438\u043b\u0435\u0442"},{"location":"L2/#_7","text":"urlpatterns = [ path('flights/', flights_list, name='flights_list_url'), path('flights/<str:slug>/', flight_details, name='flight_details_url'), path('registration/', registration, name='registration_url'), path('login/', login_page, name='login_url'), path('logout/', logout_user, name='logout_url'), path('profile/', profile, name='profile_url'), path('profile/ticket/<int:pk>/delete/', ticket_delete, name='ticket_delete_url'), path('profile/ticket/<int:pk>/review/update/', ReviewUpdate.as_view()), path('profile/ticket/<int:pk>/update/', TicketUpdate.as_view()), ]","title":"\u041f\u0443\u0442\u0438"},{"location":"L2/#_8","text":"","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"},{"location":"L2/#_9","text":"def flights_list(request): flights = Flight.objects.all() flights = flights.order_by('departure').reverse() return render(request, 'flights/flights_list.html', context={'flights': flights})","title":"\u0422\u0430\u0431\u043b\u043e \u0440\u0435\u0439\u0441\u043e\u0432"},{"location":"L2/#_10","text":"@login_required(login_url='login_url') def flight_details(request, slug): flight = Flight.objects.get(slug__iexact=slug) rates = Ticket.objects.filter(flight__slug=slug).exclude(rate=None) passengers = Ticket.objects.filter(flight__slug=slug).order_by('seat') form = BuyTicketForm(request.POST or None) if request.method == 'POST': form = BuyTicketForm(request.POST) ticket = form.save(commit=False) ticket.user = request.user ticket.flight = flight if form.is_valid(): ticket.save() return redirect('profile_url') isOrdered = Ticket.objects.filter(user__username=request.user.username, flight__slug=slug) return render(request, 'flights/flight_page.html', context={'flight': flight, 'form': form, 'ordered': isOrdered, 'rates': rates, 'passengers': passengers}) \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0444\u043e\u0440\u043c\u0430: class BuyTicketForm(forms.ModelForm): class Meta: model = Ticket fields = [ \"passenger_name\", \"passenger_surname\", \"passenger_passport\", ]","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u0439\u0441\u0435"},{"location":"L2/#_11","text":"def registration(request): if request.user.is_authenticated: return redirect('tours_list_url') else: form = CreateUserForm() if request.method == 'POST': form = CreateUserForm(request.POST) if form.is_valid(): form.save() messages.success(request, 'Account was created for ' + form.cleaned_data.get('username')) return redirect('login_url') return render(request, 'flights/registration.html', context={'form': form}) def login_page(request): if request.user.is_authenticated: return redirect('flights_list_url') else: if request.method == 'POST': username = request.POST.get('username') password = request.POST.get('password') user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect('profile_url') else: messages.info(request, 'Username OR password is incorrect') return render(request, 'flights/login.html', context={}) def logout_user(request): logout(request) return redirect('login_url')","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f"},{"location":"L2/#_12","text":"@login_required(login_url='login_url') def profile(request): tickets = Ticket.objects.filter(user__username__iexact=request.user) tickets = tickets.order_by('flight__departure').reverse() return render(request, 'flights/profile.html', context={'tickets': tickets}) def ticket_delete(request, pk): ticket = Ticket.objects.get(id=pk) ticket.delete() return redirect('profile_url') class TicketUpdate(UpdateView): model = Ticket fields = ['passenger_name', 'passenger_surname', 'passenger_passport'] success_url = '/profile' template_name = 'flights/ticket_update.html' class ReviewUpdate(UpdateView): model = Ticket fields = ['rate', 'review_text'] success_url = '/profile' template_name = 'flights/review_update.html'","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"P3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041c\u043e\u0434\u0435\u043b\u0438 class Car(models.Model): number = models.CharField(max_length=10) brand = models.CharField(max_length=32) model = models.CharField(max_length=32) color = models.CharField(max_length=32) class Owner(AbstractUser): surname = models.CharField(max_length=30, null=True, blank=True) name = models.CharField(max_length=30, null=True, blank=True) birth_date = models.DateTimeField(null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') passport = models.CharField(max_length=11, null=True, blank=True) address = models.CharField(max_length=200, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) class Licence(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Ownership(models.Model): driver = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateTimeField(null=False) expiry_date = models.DateTimeField() \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 .add(), \u043d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u201c\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\u201d # \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b garrosh = Owner.objects.create(surname='Hellscream', name='Garrosh', username='locktarogar', password='qwerty123', nationality='orc') arthas = Owner.objects.create(surname='Menethil', name='Arthas', username='TheLichKing', password='qwerty123', nationality='human') sylvanas = Owner.objects.create(surname='Windrunner', name='Sylvanas', username='death2u', password='qwerty123', nationality='elf') illidan = Owner.objects.create(surname='Stormrage', name='Illidan', username='illlidannnn', password='qwerty123', nationality='night elf') jaina = Owner.objects.create(surname='Proudmoore', name='Jaina', username='frostbold', password='qwerty123', nationality='human') tyrande = Owner.objects.create(surname='Whisperwind', name='Tyrande', username='yserasdauther', password='qwerty123', nationality='night elf') # \u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 wolf = Car.objects.create(number='wolf777', brand='horseback riding pets', model='rare wolf', color='grey') sindragosa = Car.objects.create(number='Sindragosa', brand='dragon', model='ice dragon', color='white') horse = Car.objects.create(number='deadhorse', brand='horseback riding pets', model='epic horse', color='black') sabertooth = Car.objects.create(number='6s6b6th', brand='horseback riding pets', model='elven sabertooth', color='blue') ysera = Car.objects.create(number='tear3', brand='dragon', model='green dragon', color='green') # \u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f l_garrosh = Licence.objects.create(driver=garrosh, number='1', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_arthas = Licence.objects.create(driver=arthas, number='2', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_arthas = Licence.objects.create(driver=arthas, number='3', type='flying', issue_date='2000-01-01T00:00:00+00:00') l_sylvanas = Licence.objects.create(driver=sylvanas, number='4', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_illidan = Licence.objects.create(driver=illidan, number='5', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_jaina = Licence.objects.create(driver=jaina, number='6', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_tyrande = Licence.objects.create(driver=tyrande, number='7', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_tyrande = Licence.objects.create(driver=tyrande, number='8', type='flying', issue_date='2000-01-01T00:00:00+00:00') # \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 Ownership.objects.create(driver=garrosh, vehicle=wolf, start_date='2000-02-02T00:00:00+00:00', expiry_date='2010-01-01T00:00:00+00:00') Ownership.objects.create(driver=arthas, vehicle=sindragosa, start_date='2000-02-02T00:00:00+00:00', expiry_date='2010-01-01T00:00:00+00:00') Ownership.objects.create(driver=sylvanas, vehicle=sindragosa, start_date='2010-02-02T00:00:00+00:00', expiry_date='2100-01-01T00:00:00+00:00') Ownership.objects.create(driver=illidan, vehicle=horse, start_date='2000-02-02T00:00:00+00:00', expiry_date='2000-03-03T00:00:00+00:00') Ownership.objects.create(driver=jaina, vehicle=horse, start_date='2000-04-04T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00') Ownership.objects.create(driver=tyrande, vehicle=ysera, start_date='2000-01-01T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00') Ownership.objects.create(driver=tyrande, vehicle=sabertooth, start_date='2000-01-01T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00') \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter(brand='dragon') \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) Owner.objects.filter(name = \"Jaina\") \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) licence = Licence.objects.get(owner=Owner.objects.order_by('?').first().id) owner = licence.owner \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) Owner.objects.filter(cars__color__iexact='grey') \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) Owner.objects.filter(ownership__start_date__gte='2010-01-01T00:00+00:00') \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f Licence.objects.aggregate(Min('issue_date')) \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 Ownership.objects.aggregate(Max('expiry_date')) \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f Ownership.objects.values('owner__username').annotate(Count('car')) \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values('brand').annotate(Count('id')) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() Licence.objects.order_by('issue_date')","title":"P3"},{"location":"P3/#3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"P3/#_1","text":"class Car(models.Model): number = models.CharField(max_length=10) brand = models.CharField(max_length=32) model = models.CharField(max_length=32) color = models.CharField(max_length=32) class Owner(AbstractUser): surname = models.CharField(max_length=30, null=True, blank=True) name = models.CharField(max_length=30, null=True, blank=True) birth_date = models.DateTimeField(null=True, blank=True) cars = models.ManyToManyField(Car, through='Ownership') passport = models.CharField(max_length=11, null=True, blank=True) address = models.CharField(max_length=200, null=True, blank=True) nationality = models.CharField(max_length=30, null=True, blank=True) class Licence(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Ownership(models.Model): driver = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateTimeField(null=False) expiry_date = models.DateTimeField()","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"P3/#1","text":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 .add(), \u043d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u201c\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435\u201d # \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b garrosh = Owner.objects.create(surname='Hellscream', name='Garrosh', username='locktarogar', password='qwerty123', nationality='orc') arthas = Owner.objects.create(surname='Menethil', name='Arthas', username='TheLichKing', password='qwerty123', nationality='human') sylvanas = Owner.objects.create(surname='Windrunner', name='Sylvanas', username='death2u', password='qwerty123', nationality='elf') illidan = Owner.objects.create(surname='Stormrage', name='Illidan', username='illlidannnn', password='qwerty123', nationality='night elf') jaina = Owner.objects.create(surname='Proudmoore', name='Jaina', username='frostbold', password='qwerty123', nationality='human') tyrande = Owner.objects.create(surname='Whisperwind', name='Tyrande', username='yserasdauther', password='qwerty123', nationality='night elf') # \u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 wolf = Car.objects.create(number='wolf777', brand='horseback riding pets', model='rare wolf', color='grey') sindragosa = Car.objects.create(number='Sindragosa', brand='dragon', model='ice dragon', color='white') horse = Car.objects.create(number='deadhorse', brand='horseback riding pets', model='epic horse', color='black') sabertooth = Car.objects.create(number='6s6b6th', brand='horseback riding pets', model='elven sabertooth', color='blue') ysera = Car.objects.create(number='tear3', brand='dragon', model='green dragon', color='green') # \u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f l_garrosh = Licence.objects.create(driver=garrosh, number='1', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_arthas = Licence.objects.create(driver=arthas, number='2', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_arthas = Licence.objects.create(driver=arthas, number='3', type='flying', issue_date='2000-01-01T00:00:00+00:00') l_sylvanas = Licence.objects.create(driver=sylvanas, number='4', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_illidan = Licence.objects.create(driver=illidan, number='5', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_jaina = Licence.objects.create(driver=jaina, number='6', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_tyrande = Licence.objects.create(driver=tyrande, number='7', type='riding', issue_date='2000-01-01T00:00:00+00:00') l_tyrande = Licence.objects.create(driver=tyrande, number='8', type='flying', issue_date='2000-01-01T00:00:00+00:00') # \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 Ownership.objects.create(driver=garrosh, vehicle=wolf, start_date='2000-02-02T00:00:00+00:00', expiry_date='2010-01-01T00:00:00+00:00') Ownership.objects.create(driver=arthas, vehicle=sindragosa, start_date='2000-02-02T00:00:00+00:00', expiry_date='2010-01-01T00:00:00+00:00') Ownership.objects.create(driver=sylvanas, vehicle=sindragosa, start_date='2010-02-02T00:00:00+00:00', expiry_date='2100-01-01T00:00:00+00:00') Ownership.objects.create(driver=illidan, vehicle=horse, start_date='2000-02-02T00:00:00+00:00', expiry_date='2000-03-03T00:00:00+00:00') Ownership.objects.create(driver=jaina, vehicle=horse, start_date='2000-04-04T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00') Ownership.objects.create(driver=tyrande, vehicle=ysera, start_date='2000-01-01T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00') Ownership.objects.create(driver=tyrande, vehicle=sabertooth, start_date='2000-01-01T00:00:00+00:00', expiry_date='2100-03-03T00:00:00+00:00')","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1:"},{"location":"P3/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter(brand='dragon') \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) Owner.objects.filter(name = \"Jaina\") \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) licence = Licence.objects.get(owner=Owner.objects.order_by('?').first().id) owner = licence.owner \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) Owner.objects.filter(cars__color__iexact='grey') \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) Owner.objects.filter(ownership__start_date__gte='2010-01-01T00:00+00:00')","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2:"},{"location":"P3/#3_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f Licence.objects.aggregate(Min('issue_date')) \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 Ownership.objects.aggregate(Max('expiry_date')) \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f Ownership.objects.values('owner__username').annotate(Count('car')) \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values('brand').annotate(Count('id')) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() Licence.objects.order_by('issue_date')","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3:"},{"location":"L3/about/","text":"GameBazzar \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441 \u0432\u0438\u0434\u0435\u043e-\u0438\u0433\u0440\u0430\u043c\u0438. \u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438 User \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 User = get_user_model() Genre \u0416\u0430\u043d\u0440 \u0438\u0433\u0440\u044b class Genre(models.Model): name = models.CharField(max_length=64, unique=True) def __str__(self): return self.name Platform \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0438\u0433\u0440\u044b class Platform(models.Model): name = models.CharField(max_length=64, unique=True) def __str__(self): return self.name Game \u0418\u0433\u0440\u0430. class Game(models.Model): name = models.CharField(max_length=64, unique=True) description = models.CharField(max_length=512) genre = models.ForeignKey(Genre, on_delete=models.CASCADE) image = models.ImageField(upload_to='images/', null=True, blank=True) def __str__(self): return self.name Product \u0422\u043e\u0432\u0430\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 class Product(models.Model): game = models.ForeignKey(Game, on_delete=models.CASCADE) platform = models.ForeignKey(Platform, on_delete=models.CASCADE) price = models.IntegerField() added_by = models.ForeignKey(User, on_delete=models.CASCADE) def __str__(self): return f\"{self.game} for {self.platform}\" Sell \u041f\u0440\u043e\u0434\u0430\u0436\u0430 class Sell(models.Model): date = models.DateField() product = models.ForeignKey(Product, on_delete=models.CASCADE) username = models.CharField(max_length=64) def __str__(self): return f\"{self.username} - {self.product}\"","title":"about"},{"location":"L3/about/#gamebazzar","text":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441 \u0432\u0438\u0434\u0435\u043e-\u0438\u0433\u0440\u0430\u043c\u0438.","title":"GameBazzar"},{"location":"L3/about/#_1","text":"","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430"},{"location":"L3/about/#_2","text":"User \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 User = get_user_model() Genre \u0416\u0430\u043d\u0440 \u0438\u0433\u0440\u044b class Genre(models.Model): name = models.CharField(max_length=64, unique=True) def __str__(self): return self.name Platform \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0438\u0433\u0440\u044b class Platform(models.Model): name = models.CharField(max_length=64, unique=True) def __str__(self): return self.name Game \u0418\u0433\u0440\u0430. class Game(models.Model): name = models.CharField(max_length=64, unique=True) description = models.CharField(max_length=512) genre = models.ForeignKey(Genre, on_delete=models.CASCADE) image = models.ImageField(upload_to='images/', null=True, blank=True) def __str__(self): return self.name Product \u0422\u043e\u0432\u0430\u0440 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 class Product(models.Model): game = models.ForeignKey(Game, on_delete=models.CASCADE) platform = models.ForeignKey(Platform, on_delete=models.CASCADE) price = models.IntegerField() added_by = models.ForeignKey(User, on_delete=models.CASCADE) def __str__(self): return f\"{self.game} for {self.platform}\" Sell \u041f\u0440\u043e\u0434\u0430\u0436\u0430 class Sell(models.Model): date = models.DateField() product = models.ForeignKey(Product, on_delete=models.CASCADE) username = models.CharField(max_length=64) def __str__(self): return f\"{self.username} - {self.product}\"","title":"\u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438"},{"location":"L3/endpoints/","text":"Endpoints \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0436\u0430\u043d\u0440\u044b \u0438\u0433\u0440 URL: /gamebazzar/genre/ Allow: GET [ { id: 0, name: \"\" } ] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0433\u0440\u044b URL: /gamebazzar/game/ Allow: GET [ { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" } ] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 URL: /gamebazzar/me/ Allow: GET WWW-Authenticate: Token { username: \"\", email: \"\", is_staff: false } \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b URL: /gamebazzar/platform/ Allow: GET [ { id: 0, name: \"\" } ] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b URL: /gamebazzar/product/ Allow: GET [ { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 } ] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id URL: /gamebazzar/product/{id} Allow: GET { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 } \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id URL: /gamebazzar/product/{id}/update/ Allow: PUT, PATCH WWW-Authenticate: Token { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 } \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id URL: /gamebazzar/product/{id}/delete/ Allow: DELETE WWW-Authenticate: Token \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 URL: /gamebazzar/product/create/ Allow: POST WWW-Authenticate: Token \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 URL: /gamebazzar/sell/ Allow: GET [ { id: 0, product: { ... }, date: \"\", username: \"\" } ] \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 \u043f\u043e \u0434\u043d\u044f\u043c URL: /gamebazzar/sell/info/ Allow: GET WWW-Authenticate: Token [ { date: \"\", amount: 0 } ] \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 URL: /gamebazzar/staff/ Allow: GET [ { username: \"\", email: \"\", is_staff: false } ] \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0435 \u043f\u043e username URL: /gamebazzar/staff/{username}/ Allow: GET, PUT, PATCH, DELETE WWW-Authenticate: Token { username: \"\", email: \"\", is_staff: false }","title":"endpoints"},{"location":"L3/endpoints/#endpoints","text":"","title":"Endpoints"},{"location":"L3/endpoints/#_1","text":"URL: /gamebazzar/genre/ Allow: GET [ { id: 0, name: \"\" } ]","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0436\u0430\u043d\u0440\u044b \u0438\u0433\u0440"},{"location":"L3/endpoints/#_2","text":"URL: /gamebazzar/game/ Allow: GET [ { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" } ]","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0433\u0440\u044b"},{"location":"L3/endpoints/#_3","text":"URL: /gamebazzar/me/ Allow: GET WWW-Authenticate: Token { username: \"\", email: \"\", is_staff: false }","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435"},{"location":"L3/endpoints/#_4","text":"URL: /gamebazzar/platform/ Allow: GET [ { id: 0, name: \"\" } ]","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b"},{"location":"L3/endpoints/#_5","text":"URL: /gamebazzar/product/ Allow: GET [ { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 } ]","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b"},{"location":"L3/endpoints/#id","text":"URL: /gamebazzar/product/{id} Allow: GET { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 }","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id"},{"location":"L3/endpoints/#id_1","text":"URL: /gamebazzar/product/{id}/update/ Allow: PUT, PATCH WWW-Authenticate: Token { id: 0, game: { id: 0, genre: { id: 0, name: \"\" }, name: \"\", description: \"\", image: \"\" }, platform: { id: 0, name: \"\" }, price: 0, count: 0 }","title":"\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id"},{"location":"L3/endpoints/#id_2","text":"URL: /gamebazzar/product/{id}/delete/ Allow: DELETE WWW-Authenticate: Token","title":"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u043f\u043e id"},{"location":"L3/endpoints/#_6","text":"URL: /gamebazzar/product/create/ Allow: POST WWW-Authenticate: Token","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0442"},{"location":"L3/endpoints/#_7","text":"URL: /gamebazzar/sell/ Allow: GET [ { id: 0, product: { ... }, date: \"\", username: \"\" } ]","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445"},{"location":"L3/endpoints/#_8","text":"URL: /gamebazzar/sell/info/ Allow: GET WWW-Authenticate: Token [ { date: \"\", amount: 0 } ]","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 \u043f\u043e \u0434\u043d\u044f\u043c"},{"location":"L3/endpoints/#_9","text":"URL: /gamebazzar/staff/ Allow: GET [ { username: \"\", email: \"\", is_staff: false } ]","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"},{"location":"L3/endpoints/#username","text":"URL: /gamebazzar/staff/{username}/ Allow: GET, PUT, PATCH, DELETE WWW-Authenticate: Token { username: \"\", email: \"\", is_staff: false }","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0435 \u043f\u043e username"},{"location":"L3/views/","text":"Views class GenreListAPIView(generics.ListAPIView): serializer_class = GenreSerializer queryset = Genre.objects.all() class PlatformListAPIView(generics.ListAPIView): serializer_class = PlatfomSerializer queryset = Platform.objects.all() class GameListAPIView(generics.ListAPIView): serializer_class = GameSerializer def get_queryset(self): game_list = Game.objects.all() genre = self.request.query_params.get('genre') if genre: game_list = game_list.filter(genre=genre) return game_list class ProductListAPIView(generics.ListAPIView): serializer_class = ProductSerializer def get_queryset(self): product_list = Product.objects.all() platform = self.request.query_params.get('platform') genre = self.request.query_params.get('genre') if platform: product_list = product_list.filter(platform=platform) if genre: product_list = product_list.filter(game__genre=genre) return product_list class ProductUpdateAPIView(generics.UpdateAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class ProductDeleteAPIView(generics.DestroyAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class ProductCreateAPIView(generics.CreateAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class SellListAPIView(generics.ListAPIView): serializer_class = SellSerializer queryset = Sell.objects.all() class UserAPIView(APIView): def get(self, request): try: user = User.objects.filter(username=request.user) serializer = UserSerializer(user[0]) return Response(serializer.data) except: return Response() Urls urlpatterns = [ path('genre/', GenreListAPIView.as_view()), path('platform/', PlatformListAPIView.as_view()), path('game/', GameListAPIView.as_view()), path('product/', ProductListAPIView.as_view()), path('sell/', SellListAPIView.as_view()), path('product/<int:pk>/delete/', ProductDeleteAPIView.as_view()), path('product/<int:pk>/update/', ProductUpdateAPIView.as_view()), path('product/create/', ProductCreateAPIView.as_view()), path('me/', UserAPIView.as_view()), ]","title":"views"},{"location":"L3/views/#views","text":"class GenreListAPIView(generics.ListAPIView): serializer_class = GenreSerializer queryset = Genre.objects.all() class PlatformListAPIView(generics.ListAPIView): serializer_class = PlatfomSerializer queryset = Platform.objects.all() class GameListAPIView(generics.ListAPIView): serializer_class = GameSerializer def get_queryset(self): game_list = Game.objects.all() genre = self.request.query_params.get('genre') if genre: game_list = game_list.filter(genre=genre) return game_list class ProductListAPIView(generics.ListAPIView): serializer_class = ProductSerializer def get_queryset(self): product_list = Product.objects.all() platform = self.request.query_params.get('platform') genre = self.request.query_params.get('genre') if platform: product_list = product_list.filter(platform=platform) if genre: product_list = product_list.filter(game__genre=genre) return product_list class ProductUpdateAPIView(generics.UpdateAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class ProductDeleteAPIView(generics.DestroyAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class ProductCreateAPIView(generics.CreateAPIView): permission_classes = [IsAdminUser] serializer_class = ProductSerializer queryset = Product.objects.all() class SellListAPIView(generics.ListAPIView): serializer_class = SellSerializer queryset = Sell.objects.all() class UserAPIView(APIView): def get(self, request): try: user = User.objects.filter(username=request.user) serializer = UserSerializer(user[0]) return Response(serializer.data) except: return Response()","title":"Views"},{"location":"L3/views/#urls","text":"urlpatterns = [ path('genre/', GenreListAPIView.as_view()), path('platform/', PlatformListAPIView.as_view()), path('game/', GameListAPIView.as_view()), path('product/', ProductListAPIView.as_view()), path('sell/', SellListAPIView.as_view()), path('product/<int:pk>/delete/', ProductDeleteAPIView.as_view()), path('product/<int:pk>/update/', ProductUpdateAPIView.as_view()), path('product/create/', ProductCreateAPIView.as_view()), path('me/', UserAPIView.as_view()), ]","title":"Urls"}]}